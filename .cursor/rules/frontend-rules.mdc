---
description: 
globs: 
alwaysApply: false
---
# 프론트엔드 프로젝트 규칙

## 프로젝트 구조
- src/
  - components/     # 재사용 가능한 컴포넌트
  - pages/         # 페이지 컴포넌트
  - hooks/         # 커스텀 훅
  - utils/         # 유틸리티 함수
  - services/      # API 서비스
  - styles/        # 전역 스타일
  - types/         # TypeScript 타입 정의
  - constants/     # 상수 정의
  - assets/        # 정적 자원

## 컴포넌트 작성 규칙
1. 컴포넌트 파일 구조
   ```vue
   <!-- ComponentName.vue -->
   <template>
     <div class="container">
       <!-- 템플릿 내용 -->
     </div>
   </template>

   <script setup lang="ts">
   // props 타입 정의 및 컴포넌트 로직
   defineProps<{ prop1: string; prop2?: number }>()
   // 필요시 emits, ref, watch 등 사용
   <\/script>

   <style scoped>
   .container {
     /* 스타일 정의 */
   }
   <\/style>
   ```

2. 스타일 모듈 구조
   ```css
   /* ComponentName.module.css */
   .container {
     /* 스타일 정의 */
   }
   ```

## 상태 관리
1. 전역 상태
   - Redux/Recoil 사용 시 actions, reducers, selectors 구조화
   - 상태 업데이트는 항상 action을 통해 수행

2. 로컬 상태
   - useState, useReducer 적절히 사용
   - 복잡한 상태는 커스텀 훅으로 분리

## API 통신
1. 서비스 구조
   ```typescript
   // services/api.ts
   import axios from 'axios';

   const api = axios.create({
     baseURL: process.env.REACT_APP_API_URL,
     timeout: 5000,
   });

   export const fetchData = async () => {
     try {
       const response = await api.get('/endpoint');
       return response.data;
     } catch (error) {
       // 에러 처리
     }
   };
   ```

## 성능 최적화
1. 컴포넌트 최적화
   - React.memo 적절히 사용
   - useMemo, useCallback 활용
   - 불필요한 리렌더링 방지

2. 번들 최적화
   - 코드 스플리팅 적용
   - 동적 임포트 사용
   - 이미지 최적화

## 테스트
1. 단위 테스트
   - Jest + React Testing Library 사용
   - 컴포넌트, 훅, 유틸리티 함수 테스트

2. E2E 테스트
   - Cypress 사용
   - 주요 사용자 시나리오 테스트

## 접근성
1. ARIA 레이블 사용
2. 키보드 네비게이션 지원
3. 색상 대비 준수
4. 스크린 리더 지원

## 코드 품질
1. ESLint 규칙
   ```json
   {
     "extends": [
       "react-app",
       "react-app/jest"
     ],
     "rules": {
       "no-console": "warn",
       "no-unused-vars": "error"
     }
   }
   ```

2. Prettier 설정
   ```json
   {
     "singleQuote": true,
     "trailingComma": "es5",
     "tabWidth": 2,
     "semi": true
   }
   ```

## Git 워크플로우
1. 브랜치 전략
   - main: 프로덕션 브랜치
   - develop: 개발 브랜치
   - feature/*: 기능 개발
   - bugfix/*: 버그 수정
   - release/*: 릴리스 준비

2. 커밋 메시지
   ```
   type(scope): subject

   body

   footer
   ```

## 배포
1. 환경별 설정
   - development
   - staging
   - production

2. CI/CD 파이프라인
   - 빌드
   - 테스트
   - 린트
   - 배포

## 문서화
1. 컴포넌트 문서
   - Storybook 사용
   - Props 문서화
   - 사용 예시 포함

2. API 문서
   - Swagger/OpenAPI 사용
   - 엔드포인트 설명
   - 요청/응답 예시

## 보안
1. 인증/인가
   - JWT 토큰 관리
   - 권한 체크
   - 세션 관리

2. 데이터 보안
   - 민감 정보 암호화
   - XSS 방지
   - CSRF 방지

## 모니터링
1. 에러 추적
   - Sentry 사용
   - 에러 로깅
   - 성능 모니터링

2. 분석
   - Google Analytics
   - 사용자 행동 추적
   - 성능 메트릭 수집

