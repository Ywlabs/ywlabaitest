---
description: 
globs: 
alwaysApply: false
---
# 백엔드 프로젝트 규칙

## 프로젝트 구조
- backend/
  - app.py                # 애플리케이션 진입점
  - config.py             # 환경 변수 및 설정
  - requirements.txt      # 의존성 관리
  - database.py           # DB 연결 유틸리티
  - models/               # 데이터베이스 모델
  - routes/               # API 라우트 (Blueprint)
  - services/             # 비즈니스 로직
  - common/               # 공통 유틸리티/로거
  - scheduler/            # 스케줄러 작업
  - logs/                 # 로그 파일

## 서비스 계층 규칙
1. 서비스는 services/에 위치하며, 각 도메인별로 파일 분리
2. 함수/클래스에는 한글 docstring으로 역할 명확히 기술
3. 외부 API/DB 접근은 예외 처리 및 로깅 필수
4. 비즈니스 로직은 서비스 계층에 집중, 라우트에서는 호출만 담당

## 라우트 계층 규칙
1. routes/에 Blueprint 단위로 분리
2. 각 라우트 함수는 입력 검증, 서비스 호출, 응답 반환만 담당
3. 에러 발생 시 일관된 JSON 에러 메시지 반환
4. 라우트별 로거 사용 권장

## 모델 계층 규칙
1. models/에 DB 모델 정의 (SQLAlchemy 등 사용)
2. 모델 클래스/필드는 명확한 주석과 타입 지정
3. 마이그레이션/스키마 변경 시 문서화

## 공통 유틸리티/로깅
1. 공통 함수/로거는 common/에 위치
2. setup_logger 등 로거 유틸리티 사용, 로그는 logs/에 일자별 파일로 저장
3. 모든 주요 예외/이벤트는 반드시 로깅

## 스케줄러
1. scheduler/에 주기적 작업 정의 (예: APScheduler)
2. 작업 등록/시작 함수는 init_scheduler 등으로 명확히 분리
3. 스케줄러 작업은 서비스 계층 함수만 호출

## 환경 변수/설정
1. config.py에서 dotenv로 환경 변수 관리
2. 민감 정보는 .env 파일로 분리, 코드에 직접 노출 금지
3. 설정 변경 시 반드시 문서화

## 의존성 관리
1. requirements.txt로 패키지 버전 고정
2. 불필요한 패키지 제거, 주기적 업데이트

## 테스트
1. pytest 등으로 단위/통합 테스트 작성
2. 테스트 코드는 tests/에 별도 관리
3. 주요 서비스/라우트/유틸리티 함수는 테스트 필수

## 배포/운영
1. 개발/운영 환경 분리 (환경 변수, DB 등)
2. 배포 자동화(CI/CD) 권장
3. 로그/모니터링 체계 구축

## 보안
1. DB, API 키 등 민감 정보는 환경 변수로만 관리
2. 입력값 검증 및 SQL Injection, XSS 등 방어
3. 인증/인가 로직은 서비스 계층에서 일관되게 처리

## 코드 품질
1. black, flake8 등 코드 스타일 도구 사용
2. 함수/클래스/모듈별 한글 주석 및 docstring 필수
3. 불필요한 코드/주석 제거, 가독성 우선

## 문서화
1. 주요 함수/클래스/모듈에 한글 docstring
2. API 문서(Swagger 등) 및 ERD, 배포/운영 문서화
3. 변경사항/패턴 발견 시 memory-bank 및 관련 문서 즉시 업데이트
