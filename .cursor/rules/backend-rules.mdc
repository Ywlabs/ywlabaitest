---
description:
globs:
alwaysApply: false
---
# 백엔드 프로젝트 규칙

## 프로젝트 구조
- backend/
  - services/     # 비즈니스 로직 서비스
  - routes/       # API 라우트 정의
  - models/       # 데이터베이스 모델
  - common/       # 공통 유틸리티
  - scheduler/    # 스케줄러 작업
  - logs/         # 로그 파일
  - config.py     # 설정 파일
  - database.py   # 데이터베이스 연결
  - app.py        # 애플리케이션 진입점

## 코드 작성 규칙
1. 서비스 구조
   ```python
   # services/service_name.py
   from typing import Optional, List, Dict
   import logging
   from datetime import datetime

   class ServiceName:
       def __init__(self):
           self.logger = logging.getLogger(__name__)
           
       async def method_name(self, param1: str, param2: int) -> Dict:
           try:
               # 비즈니스 로직
               return {"status": "success", "data": result}
           except Exception as e:
               self.logger.error(f"Error in method_name: {str(e)}")
               raise
   ```

2. API 라우트 구조
   ```python
   # routes/route_name.py
   from fastapi import APIRouter, HTTPException
   from typing import Optional
   from pydantic import BaseModel

   router = APIRouter()

   class RequestModel(BaseModel):
       field1: str
       field2: Optional[int] = None

   @router.post("/endpoint")
   async def endpoint(request: RequestModel):
       try:
           # 처리 로직
           return {"status": "success"}
       except Exception as e:
           raise HTTPException(status_code=500, detail=str(e))
   ```

## 데이터베이스 관리
1. 모델 정의
   ```python
   # models/model_name.py
   from sqlalchemy import Column, Integer, String, DateTime
   from database import Base

   class ModelName(Base):
       __tablename__ = "table_name"
       
       id = Column(Integer, primary_key=True)
       created_at = Column(DateTime, default=datetime.utcnow)
       # 추가 필드
   ```

2. 쿼리 작성
   - SQLAlchemy ORM 사용
   - 복잡한 쿼리는 Raw SQL 사용
   - 인덱스 최적화 고려

## 에러 처리
1. 예외 처리
   - 구체적인 예외 클래스 사용
   - 적절한 에러 메시지와 로깅
   - HTTP 상태 코드 매핑

2. 로깅
   - 구조화된 로그 포맷 사용
   - 로그 레벨 적절히 사용
   - 민감 정보 마스킹

## 성능 최적화
1. 데이터베이스
   - 인덱스 최적화
   - 쿼리 최적화
   - 커넥션 풀링

2. 캐싱
   - Redis 사용
   - 캐시 전략 수립
   - TTL 설정

## 보안
1. 인증/인가
   - JWT 토큰 사용
   - 권한 체크
   - 세션 관리

2. 데이터 보안
   - 입력값 검증
   - SQL 인젝션 방지
   - XSS 방지

## 테스트
1. 단위 테스트
   - pytest 사용
   - 모킹과 스터빙
   - 테스트 커버리지

2. 통합 테스트
   - API 엔드포인트 테스트
   - 데이터베이스 통합 테스트
   - 외부 서비스 통합 테스트

## API 문서화
1. Swagger/OpenAPI
   - 엔드포인트 문서화
   - 요청/응답 스키마
   - 예시 포함

2. 코드 문서화
   - 함수/클래스 문서화
   - 타입 힌트 사용
   - 복잡한 로직 주석

## 배포
1. 환경 설정
   - 환경별 설정 분리
   - 시크릿 관리
   - 로깅 설정

2. 컨테이너화
   - Dockerfile 작성
   - docker-compose 설정
   - 볼륨 관리

## 모니터링
1. 성능 모니터링
   - Prometheus 메트릭
   - Grafana 대시보드
   - 알림 설정

2. 로그 모니터링
   - ELK 스택
   - 로그 집계
   - 이상 감지

## 코드 품질
1. 린팅
   ```ini
   # .flake8
   [flake8]
   max-line-length = 100
   exclude = .git,__pycache__,build,dist
   ```

2. 포맷팅
   ```ini
   # pyproject.toml
   [tool.black]
   line-length = 100
   target-version = ['py38']
   ```

## Git 워크플로우
1. 브랜치 전략
   - main: 프로덕션
   - develop: 개발
   - feature/*: 기능
   - hotfix/*: 긴급 수정

2. 커밋 메시지
   ```
   type(scope): subject

   body

   footer
   ```

## CI/CD
1. 파이프라인
   - 테스트 자동화
   - 린트 체크
   - 보안 스캔
   - 자동 배포

2. 품질 게이트
   - 테스트 커버리지
   - 코드 품질
   - 보안 취약점
